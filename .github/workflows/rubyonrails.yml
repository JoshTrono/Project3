# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: "Ruby on Rails CI"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # Add or replace dependency steps here
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1.146.0 # v1.146.0
        with:
          bundler-cache: true
      # Add or replace database setup steps here
      - name: Set up database schema
        run: |
          bundle install --jobs 4 --retry 3
          bundle exec rails db:schema:load
      # Add or replace test runners here
      - name: Run tests 
        env:
          RAIL_ENV: test
          # RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          COVERAGE: 'true'
        run: 
          bundle exec rake test
        # upload coverage to artifacts
      - name : Upload coverage to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage
          
  deploy:
    needs: test
    if: ${{ github.ref == 'refs/heads/main' && needs.test.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Build docker
        run: |
          docker build -t ${{ secrets.DOCKER_REPO }}/rubymvc .
          docker login -p ${{ secrets.DOCKER_PASSWORD }} -u ${{ secrets.DOCKERUSERNAME }}
          docker push ${{ secrets.DOCKER_REPO }}/rubymvc
          
      - name: Deploy
        if: ${{ success() }}
        run: |
          touch password.pem
          echo "${{ secrets.SECRET_KEY_PAIR }}" >> password.pem
          chmod 400 password.pem
          ssh -i password.pem -t -t -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_ADDRESS }} << 'EOF'
          docker rm -f rubymvc
          docker rmi ${{ secrets.DOCKERNAME }}/rubymvc
          docker pull ${{ secrets.DOCKERNAME }}/rubymvc
          docker run -d -p 3000:3000 --name rubymvc -e  --network ruby_project joshet/rubymvc
          screen -d -m
          exit
          EOF
          

#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Install Ruby and gems
#        uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0
#        with:
#          bundler-cache: true
#      # Add or replace any other lints here
#      - name: Security audit dependencies
#        run: bin/bundler-audit --update
#      - name: Security audit application code
#        run: bin/brakeman -q -w2
#      - name: Lint Ruby files
#        run: bin/rubocop --parallel
